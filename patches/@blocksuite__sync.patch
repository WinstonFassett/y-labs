diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 271dc706d4d64d732d828514aec5c3dc2f8f31c2..0000000000000000000000000000000000000000
diff --git a/dist/blob/engine.js b/dist/blob/engine.js
index 3135a0110e3a989d625305fccc6555f50d4ec340..f47cc3b2a6595edc779b8289050f79f457f9bd0a 100644
--- a/dist/blob/engine.js
+++ b/dist/blob/engine.js
@@ -44,7 +44,7 @@ export class BlobEngine {
         if (this.main.readonly) {
             throw new Error('main peer is readonly');
         }
-        const key = typeof valueOrKey === 'string'
+        let key = typeof valueOrKey === 'string'
             ? valueOrKey
             : await sha(await valueOrKey.arrayBuffer());
         const value = typeof valueOrKey === 'string' ? _value : valueOrKey;
@@ -52,7 +52,11 @@ export class BlobEngine {
             throw new Error('value is empty');
         }
         // await upload to the main peer
-        await this.main.set(key, value);
+        const newKey = await this.main.set(key, value) ?? key;
+        if (newKey !== key) {
+            console.log('key changed', key, newKey)
+            key = newKey;
+        }
         // uploads to other peers in the background
         Promise.allSettled(this.shadows
             .filter(r => !r.readonly)
diff --git a/dist/blob/engine.js.map b/dist/blob/engine.js.map
index 63e48446a15cabe454018121607491451100a896..94c2e358d98f7ec6183822a853d8afa97646927b 100644
--- a/dist/blob/engine.js.map
+++ b/dist/blob/engine.js.map
@@ -1 +1 @@
-{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../src/blob/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Logger, sha } from '@blocksuite/global/utils';\n\nimport type { BlobSource } from './source.js';\n\nexport interface BlobStatus {\n  isStorageOverCapacity: boolean;\n}\n\n/**\n * # BlobEngine\n *\n * sync blobs between storages in background.\n *\n * all operations priority use main, then use shadows.\n */\nexport class BlobEngine {\n  private _abort: AbortController | null = null;\n\n  get sources() {\n    return [this.main, ...this.shadows];\n  }\n\n  constructor(\n    readonly main: BlobSource,\n    readonly shadows: BlobSource[],\n    readonly logger: Logger\n  ) {}\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async delete(_key: string) {\n    this.logger.error(\n      'You are trying to delete a blob. We do not support this feature yet. We need to wait until we implement the indexer, which will inform us which doc is using a particular blob so that we can safely delete it.'\n    );\n  }\n\n  async get(key: string) {\n    this.logger.debug('get blob', key);\n    for (const source of this.sources) {\n      const data = await source.get(key);\n      if (data) {\n        return data;\n      }\n    }\n    return null;\n  }\n\n  async list() {\n    const blobIdSet = new Set<string>();\n\n    for (const source of this.sources) {\n      const blobs = await source.list();\n      for (const blob of blobs) {\n        blobIdSet.add(blob);\n      }\n    }\n\n    return Array.from(blobIdSet);\n  }\n\n  async set(value: Blob): Promise<string>;\n\n  async set(key: string, value: Blob): Promise<string>;\n\n  async set(valueOrKey: string | Blob, _value?: Blob) {\n    if (this.main.readonly) {\n      throw new Error('main peer is readonly');\n    }\n\n    const key =\n      typeof valueOrKey === 'string'\n        ? valueOrKey\n        : await sha(await valueOrKey.arrayBuffer());\n    const value = typeof valueOrKey === 'string' ? _value : valueOrKey;\n\n    if (!value) {\n      throw new Error('value is empty');\n    }\n\n    // await upload to the main peer\n    await this.main.set(key, value);\n\n    // uploads to other peers in the background\n    Promise.allSettled(\n      this.shadows\n        .filter(r => !r.readonly)\n        .map(peer =>\n          peer.set(key, value).catch(err => {\n            this.logger.error('Error when uploading to peer', err);\n          })\n        )\n    )\n      .then(result => {\n        if (result.some(({ status }) => status === 'rejected')) {\n          this.logger.error(\n            `blob ${key} update finish, but some peers failed to update`\n          );\n        } else {\n          this.logger.debug(`blob ${key} update finish`);\n        }\n      })\n      .catch(() => {\n        // Promise.allSettled never reject\n      });\n\n    return key;\n  }\n\n  start() {\n    if (this._abort) {\n      return;\n    }\n    this._abort = new AbortController();\n    const abortSignal = this._abort.signal;\n\n    const sync = () => {\n      if (abortSignal.aborted) {\n        return;\n      }\n\n      this.sync()\n        .catch(error => {\n          this.logger.error('sync blob error', error);\n        })\n        .finally(() => {\n          // sync every 1 minute\n          setTimeout(sync, 60000);\n        });\n    };\n\n    sync();\n  }\n\n  stop() {\n    this._abort?.abort();\n    this._abort = null;\n  }\n\n  async sync() {\n    if (this.main.readonly) {\n      return;\n    }\n    this.logger.debug('start syncing blob...');\n    for (const shadow of this.shadows) {\n      let mainList: string[] = [];\n      let shadowList: string[] = [];\n\n      if (!shadow.readonly) {\n        try {\n          mainList = await this.main.list();\n          shadowList = await shadow.list();\n        } catch (err) {\n          this.logger.error(`error when sync`, err);\n          continue;\n        }\n\n        const needUpload = mainList.filter(key => !shadowList.includes(key));\n        for (const key of needUpload) {\n          try {\n            const data = await this.main.get(key);\n            if (data) {\n              await shadow.set(key, data);\n            } else {\n              this.logger.error(\n                'data not found when trying upload from main to shadow'\n              );\n            }\n          } catch (err) {\n            this.logger.error(\n              `error when sync ${key} from [${this.main.name}] to [${shadow.name}]`,\n              err\n            );\n          }\n        }\n      }\n\n      const needDownload = shadowList.filter(key => !mainList.includes(key));\n      for (const key of needDownload) {\n        try {\n          const data = await shadow.get(key);\n          if (data) {\n            await this.main.set(key, data);\n          } else {\n            this.logger.error(\n              'data not found when trying download from shadow to main'\n            );\n          }\n        } catch (err) {\n          this.logger.error(\n            `error when sync ${key} from [${shadow.name}] to [${this.main.name}]`,\n            err\n          );\n        }\n      }\n    }\n\n    this.logger.debug('finish syncing blob');\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../src/blob/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Logger, sha } from '@blocksuite/global/utils';\n\nimport type { BlobSource } from './source.js';\n\nexport interface BlobStatus {\n  isStorageOverCapacity: boolean;\n}\n\n/**\n * # BlobEngine\n *\n * sync blobs between storages in background.\n *\n * all operations priority use main, then use shadows.\n */\nexport class BlobEngine {\n  private _abort: AbortController | null = null;\n\n  get sources() {\n    return [this.main, ...this.shadows];\n  }\n\n  constructor(\n    readonly main: BlobSource,\n    readonly shadows: BlobSource[],\n    readonly logger: Logger\n  ) {}\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async delete(_key: string) {\n    this.logger.error(\n      'You are trying to delete a blob. We do not support this feature yet. We need to wait until we implement the indexer, which will inform us which doc is using a particular blob so that we can safely delete it.'\n    );\n  }\n\n  async get(key: string) {\n    this.logger.debug('get blob', key);\n    for (const source of this.sources) {\n      const data = await source.get(key);\n      if (data) {\n        return data;\n      }\n    }\n    return null;\n  }\n\n  async list() {\n    const blobIdSet = new Set<string>();\n\n    for (const source of this.sources) {\n      const blobs = await source.list();\n      for (const blob of blobs) {\n        blobIdSet.add(blob);\n      }\n    }\n\n    return Array.from(blobIdSet);\n  }\n\n  async set(value: Blob): Promise<string>;\n\n  async set(key: string, value: Blob): Promise<string>;\n\n  async set(valueOrKey: string | Blob, _value?: Blob) {\n    if (this.main.readonly) {\n      throw new Error('main peer is readonly');\n    }\n\n    let key =\n      typeof valueOrKey === 'string'\n        ? valueOrKey\n        : await sha(await valueOrKey.arrayBuffer());\n    const value = typeof valueOrKey === 'string' ? _value : valueOrKey;\n\n    if (!value) {\n      throw new Error('value is empty');\n    }\n\n    // await upload to the main peer\n    await this.main.set(key, value);\nconst newKey = await this.main.set(key, value) ?? key;\nif (newKey !== key) {\n    console.log('key changed', key, newKey)\n    key = newKey;\n}\n\n    // uploads to other peers in the background\n    Promise.allSettled(\n      this.shadows\n        .filter(r => !r.readonly)\n        .map(peer =>\n          peer.set(key, value).catch(err => {\n            this.logger.error('Error when uploading to peer', err);\n          })\n        )\n    )\n      .then(result => {\n        if (result.some(({ status }) => status === 'rejected')) {\n          this.logger.error(\n            `blob ${key} update finish, but some peers failed to update`\n          );\n        } else {\n          this.logger.debug(`blob ${key} update finish`);\n        }\n      })\n      .catch(() => {\n        // Promise.allSettled never reject\n      });\n\n    return key;\n  }\n\n  start() {\n    if (this._abort) {\n      return;\n    }\n    this._abort = new AbortController();\n    const abortSignal = this._abort.signal;\n\n    const sync = () => {\n      if (abortSignal.aborted) {\n        return;\n      }\n\n      this.sync()\n        .catch(error => {\n          this.logger.error('sync blob error', error);\n        })\n        .finally(() => {\n          // sync every 1 minute\n          setTimeout(sync, 60000);\n        });\n    };\n\n    sync();\n  }\n\n  stop() {\n    this._abort?.abort();\n    this._abort = null;\n  }\n\n  async sync() {\n    if (this.main.readonly) {\n      return;\n    }\n    this.logger.debug('start syncing blob...');\n    for (const shadow of this.shadows) {\n      let mainList: string[] = [];\n      let shadowList: string[] = [];\n\n      if (!shadow.readonly) {\n        try {\n          mainList = await this.main.list();\n          shadowList = await shadow.list();\n        } catch (err) {\n          this.logger.error(`error when sync`, err);\n          continue;\n        }\n\n        const needUpload = mainList.filter(key => !shadowList.includes(key));\n        for (const key of needUpload) {\n          try {\n            const data = await this.main.get(key);\n            if (data) {\n              await shadow.set(key, data);\n            } else {\n              this.logger.error(\n                'data not found when trying upload from main to shadow'\n              );\n            }\n          } catch (err) {\n            this.logger.error(\n              `error when sync ${key} from [${this.main.name}] to [${shadow.name}]`,\n              err\n            );\n          }\n        }\n      }\n\n      const needDownload = shadowList.filter(key => !mainList.includes(key));\n      for (const key of needDownload) {\n        try {\n          const data = await shadow.get(key);\n          if (data) {\n            await this.main.set(key, data);\n          } else {\n            this.logger.error(\n              'data not found when trying download from shadow to main'\n            );\n          }\n        } catch (err) {\n          this.logger.error(\n            `error when sync ${key} from [${shadow.name}] to [${this.main.name}]`,\n            err\n          );\n        }\n      }\n    }\n\n    this.logger.debug('finish syncing blob');\n  }\n}\n"]}
\ No newline at end of file
diff --git a/src/blob/engine.ts b/src/blob/engine.ts
index f5de01f8565a0b050cf1af1c26615906974e56e9..797f920ce60ef2487af99a48524ebc6a6a51a1c2 100644
--- a/src/blob/engine.ts
+++ b/src/blob/engine.ts
@@ -66,7 +66,7 @@ export class BlobEngine {
       throw new Error('main peer is readonly');
     }
 
-    const key =
+    let key =
       typeof valueOrKey === 'string'
         ? valueOrKey
         : await sha(await valueOrKey.arrayBuffer());
@@ -76,9 +76,12 @@ export class BlobEngine {
       throw new Error('value is empty');
     }
 
-    // await upload to the main peer
-    await this.main.set(key, value);
-
+    // await upload to the main peer    
+    const newKey = await this.main.set(key, value) ?? key;
+    if (newKey !== key) {
+        console.log('key changed', key, newKey)
+        key = newKey;
+    }
     // uploads to other peers in the background
     Promise.allSettled(
       this.shadows
